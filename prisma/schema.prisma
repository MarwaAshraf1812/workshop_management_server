datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  password  String
  role      Role     @default(STUDENT)
  created_at DateTime @default(now())

  // Relations
  profile       Profile?
  leaderBoard   LeaderBoard?
  progress      Progress[]
  notifications UserNotification[]
  workshopUsers workshopUsers[]
  submissions   Submission[]
}

model Profile {
  user_id   String @id
  firstName String @db.VarChar(200)
  lastName  String @db.VarChar(200)
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model LeaderBoard {
  id           String @id @default(uuid())
  total_points Int    @default(0)
  rank         Int    @default(0)
  student_id   String @unique

  student User @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model Notification {
  id         String    @id @default(uuid())
  message    String    @default("New Notification")
  type       String
  created_at  DateTime  @default(now())
  updated_at  DateTime?  @updatedAt
  userNotifications UserNotification[]
}

model UserNotification {
  id             String   @id @default(uuid())
  user_id         String
  notification_id String
  read           Boolean  @default(false)
  updated_at      DateTime @updatedAt

  user          User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  notification  Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)

  @@unique([user_id, notification_id])
}

model Progress {
  id                 String  @id @default(uuid())
  student_id         String
  workshop_id        String
  attendances        Int     @default(0)
  assignments_scores Decimal @default(0) @db.Decimal(5, 2)
  quizes_score       Decimal @default(0) @db.Decimal(5, 2)
  total_points       Int     @default(0)

  student  User     @relation(fields: [student_id], references: [id], onDelete: Cascade)
  workshop Workshop @relation(fields: [workshop_id], references: [id], onDelete: Cascade)

  @@index([student_id])
  @@index([workshop_id])
}

model Workshop {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)
  description String   @db.Text
  start_date  DateTime
  end_date    DateTime
  online      Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  // Relations
  Materials      Material[]
  quizzes        Quiz[]
  assignments    Assignment[]
  workshop_users workshopUsers[]
  progress       Progress[]
}

model workshopUsers {
  workshop_id String
  user_id     String
  created_at  DateTime @default(now())

  // Relations
  workshop Workshop @relation(fields: [workshop_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Composite unique constraint
  @@unique([workshop_id, user_id])
}

model Material {
  id            String       @id @default(uuid())
  title         String       @db.VarChar(100)
  file_url      Json
  workshop_id   String
  material_type MaterialType @default(LINK)
  created_at    DateTime     @default(now())

  // Relations
  workshop Workshop @relation(fields: [workshop_id], references: [id])
}

model Quiz {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(100)
  deadline     DateTime
  workshop_id  String
  created_at   DateTime @default(now())
  total_points Int      @default(0)
  quiz_link    String

  workshop Workshop @relation(fields: [workshop_id], references: [id], onDelete: Cascade)

  @@index([workshop_id])
  @@index([deadline])
  @@index([total_points])
}

model Assignment {
  id              String   @id @default(uuid())
  title           String   @db.VarChar(100)
  description     String   @db.Text
  deadline        DateTime
  workshop_id     String
  created_at      DateTime @default(now())
  updated_at     DateTime @updatedAt
  total_points    Int      @default(0)
  assignment_link String

  // Relations
  workshop    Workshop     @relation(fields: [workshop_id], references: [id])
  submissions Submission[]
}

model Submission {
  id              String   @id @default(uuid())
  student_id      String
  assignment_id   String?
  assignment_link String?  @db.VarChar(255)
  submitted_at    DateTime @default(now())
  feedback        String?  @db.Text

  student    User        @relation(fields: [student_id], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignment_id], references: [id], onDelete: SetNull)

  //@@unique([student_id, assignment_id]) // A student can only submit one assignment
  // quiz       Quiz?       @relation(fields: [quiz_id], references: [id], onDelete: SetNull)

  @@index([student_id])
  @@index([assignment_id])
}

enum MaterialType {
  VIDEO
  PTX
  DOC
  PDF
  SLIDES
  LINK
}

enum Role {
  ADMIN
  MODERATOR
  INSTRUCTOR
  STUDENT
}
